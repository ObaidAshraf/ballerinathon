{"projectName":"problem_2_1","totalTests":2,"passed":1,"failed":1,"skipped":0,"coveredLines":9,"missedLines":1,"coveragePercentage":90.0,"moduleStatus":[{"name":"problem_2_1","totalTests":2,"passed":1,"failed":1,"skipped":0,"tests":[{"name":"addEmployeeTest#\u0027Test1\u0027","status":"PASSED"},{"name":"addEmployeeTestInvalid#\u0027Test2\u0027","status":"FAILURE","failureMessage":"Error while executing SQL query: INSERT INTO Employee (name, city, department, age) VALUES ( ? ,  ? ,  ? ,  ? ). Table \"EMPLOYEE\" not found (this database is empty); SQL statement:\nINSERT INTO Employee (name, city, department, age) VALUES ( ? ,  ? ,  ? ,  ? ) [42104-206]. {\"errorCode\":42104,\"sqlState\":\"42S04\"}"}]}],"moduleCoverage":[{"name":"problem_2_1","coveredLines":9,"missedLines":1,"coveragePercentage":90.0,"sourceFiles":[{"name":"main.bal","coveredLines":[8,9,12,14,16,18,20,21,22],"missedLines":[10],"coveragePercentage":90.0,"sourceCode":"import ballerinax/java.jdbc;\nimport ballerina/sql;\nimport ballerina/io;\nimport ballerina/file;\n\nfunction addEmployee(string dbFilePath, string name, string city, string department, int age) returns int {\n\n    boolean|error fileRes \u003d file:test(dbFilePath, file:EXISTS);\n    if fileRes is error{\n        return -1;\n    }\n    string db_file_path \u003d \"jdbc:h2:file:\" + dbFilePath;\n\n    io:println(db_file_path);\n\n    jdbc:Client dbClient \u003d checkpanic new (db_file_path, \"root\", \"root\");\n\n    sql:ExecutionResult result \u003d checkpanic dbClient-\u003eexecute(`INSERT INTO Employee (name, city, department, age) VALUES (${name}, ${city}, ${department}, ${age})`);\n\n    checkpanic dbClient.close();\n    return \u003cint\u003eresult.lastInsertId;\n}\n// public function main() {\n//     int last_id \u003d addEmployee(\"./db/gofigure\", \"John Doe\", \"Omaha\", \"Sales\", 24);\n//     io:println(last_id);\n// }"}]}]}