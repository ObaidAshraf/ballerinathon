<div class="fullstack-problem complete-problem-statement black-333"><h2 dir="auto">Problem Statement</h2>
<p dir="auto">Go Figure needs you to find the name and department of employees with payment entries greater than a given amount (e.g.,&nbsp;3000.00).</p>
<p dir="auto">Create a record named&nbsp;HighPayment&nbsp;to return the required data. The definition of the record is as follows.</p>
<pre class="prettyprint"><code>type HighPayment record {
    string name;
    string department;
    decimal amount;
    string reason;
};</code></pre>
<p dir="auto">Use the&nbsp;query&nbsp;operation of the JDBC client to get the required data from the database.</p>
<blockquote>
<p dir="auto">NOTE: Order the result by the&nbsp;payment_id&nbsp;in ascending order.</p>
</blockquote>
<h2 dir="auto"><a id="user-content-database-details" class="anchor" href="https://github.com/wso2-enterprise/ballerina-hackathon-problems/tree/main/Problem_2.3#database-details" aria-hidden="true"></a>Database Details</h2>
<p dir="auto">Use the provided H2 database for this problem.</p>
<blockquote>
<p dir="auto">The sample database file is&nbsp;gofigure.mv.db, and the database name is&nbsp;gofigure. It is given within the&nbsp;db&nbsp;folder.</p>
</blockquote>
<p dir="auto">The following tables are already in the sample H2 database with some sample data. The column names and data types are below.</p>
<p dir="auto"><strong>Table name</strong>&nbsp;:&nbsp;Employee</p>
<table style="border-collapse:collapse;width:100.098%;height:124.781px" border="1"><tbody>

<tr>
<td style="height:20.7969px"><strong>Columns</strong></td>
<td style="height:20.7969px"><strong>Type</strong></td>
</tr>
<tr>
<td style="height:20.7969px">employee_id</td>
<td style="height:20.7969px">integer, auto-incremented primary key</td>
</tr>
<tr>
<td style="height:20.7969px">name</td>
<td style="height:20.7969px">string</td>
</tr>
<tr>
<td style="height:20.7969px">city</td>
<td style="height:20.7969px">string</td>
</tr>
<tr>
<td style="height:20.7969px">department</td>
<td style="height:20.7969px">string</td>
</tr>
<tr>
<td style="height:20.7969px">age</td>
<td style="height:20.7969px">integer</td>
</tr>

</tbody></table>
<p dir="auto">&nbsp;</p>
<p dir="auto"><strong>Table Name</strong>:&nbsp;Payment</p>
<table style="border-collapse:collapse;width:100.098%;height:124.781px" border="1"><tbody>

<tr>
<td style="height:20.7969px"><strong>Columns</strong></td>
<td style="height:20.7969px"><strong>Type</strong></td>
</tr>
<tr>
<td style="height:20.7969px">payment_id</td>
<td style="height:20.7969px">integer, auto-incremented primary key</td>
</tr>
<tr>
<td style="height:20.7969px">date</td>
<td style="height:20.7969px">date</td>
</tr>
<tr>
<td style="height:20.7969px">amount</td>
<td style="height:20.7969px">decimal</td>
</tr>
<tr>
<td style="height:20.7969px">employee_id</td>
<td style="height:20.7969px">integer</td>
</tr>
<tr>
<td style="height:20.7969px">reason</td>
<td style="height:20.7969px">string</td>
</tr>

</tbody></table>
<p dir="auto">&nbsp;</p>
<ul dir="auto">
<li>The database file is&nbsp;gofigure.mv.db. Use the JDBC URL as&nbsp;jdbc:h2:file:/path/to/db/file</li>
<li>Username:&nbsp;root</li>
<li>Password:&nbsp;root</li>
</ul>
<h2 dir="auto"><a id="user-content-constraints" class="anchor" href="https://github.com/wso2-enterprise/ballerina-hackathon-problems/tree/main/Problem_2.3#constraints" aria-hidden="true"></a>Constraints</h2>
<ul dir="auto">
<li>Use the H2 database file provided in the&nbsp;db&nbsp;folder to validate queries and the Ballerina sample</li>
<li>Use the maven dependency params approach to add the H2 database driver as a platform dependency in your Ballerina.toml</li>
</ul>
<h2 dir="auto"><a id="user-content-definition" class="anchor" href="https://github.com/wso2-enterprise/ballerina-hackathon-problems/tree/main/Problem_2.3#definition" aria-hidden="true"></a>Definition</h2>
<p dir="auto">You have to write your code inside the following function.</p>
<pre class="prettyprint"><code>function getHighPaymentDetails(string dbFilePath, decimal  amount) returns HighPayment[]|error {
    // TODO: Write your code here
}</code></pre>
<h2 dir="auto"><a id="user-content-test-environment" class="anchor" href="https://github.com/wso2-enterprise/ballerina-hackathon-problems/tree/main/Problem_2.3#test-environment" aria-hidden="true"></a>Test Environment</h2>
<ul dir="auto">
<li>You can run the tests with&nbsp;bal test, which will run against the given sample DB.</li>
</ul>
<h2 dir="auto"><a id="user-content-examples" class="anchor" href="https://github.com/wso2-enterprise/ballerina-hackathon-problems/tree/main/Problem_2.3#examples" aria-hidden="true"></a>Examples</h2>
<p><a id="user-content-example-1" class="anchor" href="https://github.com/wso2-enterprise/ballerina-hackathon-problems/tree/main/Problem_2.3#example-1" aria-hidden="true"></a>Example 1</p>
<p dir="auto"><strong>Input:</strong>&nbsp;dbFilePath :&nbsp;“/Path/to/file/gofigure”, amount :&nbsp;3000</p>
<p dir="auto"><strong>Output:</strong>&nbsp;[{"name":"Anita Bath","department":"Marketing"},{"name":"Amanda Hug","department":"Engineering"}]</p>
<h2 dir="auto"><a id="user-content-hints" class="anchor" href="https://github.com/wso2-enterprise/ballerina-hackathon-problems/tree/main/Problem_2.3#hints" aria-hidden="true"></a>Hints</h2>
<ul dir="auto">
<li>Use the&nbsp;<a href="https://central.ballerina.io/ballerinax/java.jdbc" rel="nofollow">ballerinax/java.jdbc</a>&nbsp;module to work with the database</li>
<li>Refer to the&nbsp;<a href="https://lib.ballerina.io/ballerinax/java.jdbc/latest" rel="nofollow">Prerequisite</a>&nbsp;section for steps to add the JDBC driver as a dependency</li>
<li>Use&nbsp;<a href="https://lib.ballerina.io/ballerinax/java.jdbc/latest/clients/Client#query" rel="nofollow">query</a>&nbsp;remote method to query data from DB</li>
<li>Refer the&nbsp;<a href="https://ballerina.io/learn/by-example/jdbc-query-operation" rel="nofollow">Simple query</a>&nbsp;example</li>
<li>Use the Ballerina&nbsp;<a href="https://ballerina.io/learn/by-example/stream-type" rel="nofollow">stream</a>&nbsp;type to access the data</li>
<li>Use SQL joins to find the required dataset from the DB</li>
</ul></div>